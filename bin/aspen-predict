#!/usr/bin/env groovy

import static groovy.io.FileType.FILES

def scriptDir = new File(getClass().protectionDomain.codeSource.location.path).parentFile.parentFile.getAbsolutePath() + '/'

String VITAL_HOME = System.getenv('VITAL_HOME')

if(!VITAL_HOME) { 
	System.err.println("VITAL_HOME environment variable not set.")
	System.exit(-1);
}


List jars = [];


//dist jar
new File(scriptDir, 'dist').eachFile(FILES) {
	if(it.name.startsWith('aspen-datascripts-') && it.name.endsWith('.jar')) {
		jars.add(it.absolutePath);
	}
}

//vitalsigns
new File(VITAL_HOME + '/vitalsigns').eachFileRecurse(FILES) {
	if(it.name.endsWith('.jar')) {
		jars.add(it.absolutePath);
	}
}

//vitalsigns
new File(VITAL_HOME + '/domain-groovy-jar').eachFile(FILES) {
	if(it.name.endsWith('.jar')) {
		jars.add(it.absolutePath);
	}
}



//vitalservice
new File(VITAL_HOME + '/vitalservice').eachFileRecurse(FILES) {
	if(it.name.endsWith('.jar')) {
		jars.add(it.absolutePath);
	}
}

//vitaldomain
new File(VITAL_HOME + '/vital-domain/').eachFile(FILES) {
	if(it.name.startsWith('VitalDomain-groovy-')) {
		jars.add(it.absolutePath);
	}
}




def mainClass = 'ai.vital.aspen.datascripts.AspenPredict'

List cmd = ['java', '-cp', (String)jars.join(File.pathSeparator), mainClass]
for(String a : args) {
	cmd.add(a)
}
//println cmd
def process=new ProcessBuilder(cmd).redirectErrorStream(true).start()
process.inputStream.eachLine {println it}
