#!/usr/bin/env groovy

import static groovy.io.FileType.FILES

def scriptDir = new File(getClass().protectionDomain.codeSource.location.path).parentFile.parentFile.getAbsolutePath() + '/'

String VITAL_HOME = System.getenv('VITAL_HOME')

if(!VITAL_HOME) { 
	System.err.println("VITAL_HOME environment variable not set.")
	System.exit(-1);
}


List jars = [];


//dist jar
new File(scriptDir, 'dist').eachFile(FILES) {
	if(it.name.startsWith('aspen-datascripts-') && it.name.endsWith('.jar')) {
		jars.add(it.absolutePath);
	}
}

//vitalsigns
new File(VITAL_HOME + '/vitalsigns').eachFileRecurse(FILES) {
	if(it.name.endsWith('.jar')) {
		jars.add(it.absolutePath);
	}
}

//vitalsigns
new File(VITAL_HOME + '/domain-groovy-jar').eachFile(FILES) {
	if(it.name.endsWith('.jar')) {
		jars.add(it.absolutePath);
	}
}



//vitalservice
new File(VITAL_HOME + '/vitalservice').eachFileRecurse(FILES) {
	if(it.name.endsWith('.jar')) {
		jars.add(it.absolutePath);
	}
}

//vitaldomain
new File(VITAL_HOME + '/vital-domain/').eachFile(FILES) {
	if(it.name.startsWith('VitalDomain-groovy-')) {
		jars.add(it.absolutePath);
	}
}


/*** vital-groovy filter ***/
def vitalGroovyDir = new File(VITAL_HOME, 'vital-groovy')
if(vitalGroovyDir.exists() && vitalGroovyDir.isDirectory()) {

  for(Iterator<String> iterator = jars.iterator(); iterator.hasNext(); ) {
  
    String jar = iterator.next()

    def n = new File(jar).name
    
    if(n.matches('groovy\\-all\\-.+\\.jar')) {
    
      iterator.remove()
      
    }
  
  }
  
  File groovyUpdated = null
  
  vitalGroovyDir.eachFileRecurse(FILES) {
  
  	if(it.name.endsWith('.jar')) {
  	
      if(it.name.matches('groovy\\-all\\-.+\\.jar')) {
        groovyUpdated = it
      }
  	
      jars.add(it.absolutePath);
      
    }
    
  }
  
  if(groovyUpdated == null) {
    System.err.println "Alternative groovy jar not found in: ${vitalGroovyDir.absolutePath}"
    return
  }
   
  println "GROOVY jar replaced with vital version: ${groovyUpdated.absolutePath}"
   
}
/*** end of vital-groovy filter ***/


def mainClass = 'ai.vital.aspen.datascripts.AspenPredict'

List cmd = ['java', '-cp', (String)jars.join(File.pathSeparator), mainClass]
for(String a : args) {
	cmd.add(a)
}
//println cmd
def process=new ProcessBuilder(cmd).redirectErrorStream(true).start()
process.inputStream.eachLine {println it}
